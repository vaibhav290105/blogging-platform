{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\blogging-platform\\\\blogging\\\\frontend\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\n/*import React, { useEffect, useState } from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ onEdit }) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    const fetchPosts = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/posts');\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n            const data = await response.json();\r\n            setPosts(data);\r\n        } catch (error) {\r\n            console.error('Error fetching posts:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPosts(); // Fetch posts when component mounts\r\n    }, []);\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/posts/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n            \r\n            // Remove deleted post from state\r\n            setPosts(prevPosts => prevPosts.filter(post => post.id !== id));\r\n        } catch (error) {\r\n            console.error('Error deleting post:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Posts</h2>\r\n            {posts.map(post => (\r\n                <Post key={post.id} post={post} onEdit={onEdit} onDelete={handleDelete} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;*/\nimport React, { useEffect, useState } from 'react';\nimport Post from './Post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  fetchPosts\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n  const handleEdit = id => {\n    console.log(`Edit post with ID: ${id}`);\n  };\n  const handleDelete = async id => {\n    await fetch(`/api/posts/${id}`, {\n      method: 'DELETE'\n    });\n    fetchPosts(); // Re-fetch posts after deletion\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post,\n      onEdit: handleEdit,\n      onDelete: handleDelete\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","Post","jsxDEV","_jsxDEV","PostList","fetchPosts","_s","posts","setPosts","handleEdit","id","console","log","handleDelete","fetch","method","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","onEdit","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/blogging-platform/blogging/frontend/src/components/PostList.js"],"sourcesContent":["/*import React, { useEffect, useState } from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ onEdit }) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    const fetchPosts = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/posts');\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n            const data = await response.json();\r\n            setPosts(data);\r\n        } catch (error) {\r\n            console.error('Error fetching posts:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchPosts(); // Fetch posts when component mounts\r\n    }, []);\r\n\r\n    const handleDelete = async (id) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/posts/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n            if (!response.ok) throw new Error('Network response was not ok');\r\n            \r\n            // Remove deleted post from state\r\n            setPosts(prevPosts => prevPosts.filter(post => post.id !== id));\r\n        } catch (error) {\r\n            console.error('Error deleting post:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Posts</h2>\r\n            {posts.map(post => (\r\n                <Post key={post.id} post={post} onEdit={onEdit} onDelete={handleDelete} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;*/\r\nimport React, { useEffect, useState } from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ fetchPosts }) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchPosts();\r\n    }, []);\r\n\r\n    const handleEdit = (id) => {\r\n        console.log(`Edit post with ID: ${id}`);\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        await fetch(`/api/posts/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n        fetchPosts(); // Re-fetch posts after deletion\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Posts</h2>\r\n            {posts.map(post => (\r\n                <Post key={post.id} post={post} onEdit={handleEdit} onDelete={handleDelete} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZM,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,UAAU,GAAIC,EAAE,IAAK;IACvBC,OAAO,CAACC,GAAG,CAAC,sBAAsBF,EAAE,EAAE,CAAC;EAC3C,CAAC;EAED,MAAMG,YAAY,GAAG,MAAOH,EAAE,IAAK;IAC/B,MAAMI,KAAK,CAAC,cAAcJ,EAAE,EAAE,EAAE;MAC5BK,MAAM,EAAE;IACZ,CAAC,CAAC;IACFV,UAAU,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;EAED,oBACIF,OAAA;IAAAa,QAAA,gBACIb,OAAA;MAAAa,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbb,KAAK,CAACc,GAAG,CAACC,IAAI,iBACXnB,OAAA,CAACF,IAAI;MAAeqB,IAAI,EAAEA,IAAK;MAACC,MAAM,EAAEd,UAAW;MAACe,QAAQ,EAAEX;IAAa,GAAhES,IAAI,CAACZ,EAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2D,CAChF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACd,EAAA,CA1BIF,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AA4Bd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}