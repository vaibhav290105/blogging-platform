{"ast":null,"code":"// frontend/src/api/postApi.js\nexport const createPost = async newPost => {\n  const token = localStorage.getItem('token');\n  const response = await fetch('http://localhost:5000/api/posts', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}` // Include the token\n    },\n    body: JSON.stringify(newPost)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create post');\n  }\n};\n\n// Add a function for user login\nexport const loginUser = async (username, password) => {\n  const response = await fetch('http://localhost:5000/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to login');\n  }\n  const data = await response.json();\n  localStorage.setItem('token', data.token);\n};","map":{"version":3,"names":["createPost","newPost","token","localStorage","getItem","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","loginUser","username","password","data","json","setItem"],"sources":["C:/Users/LENOVO/Desktop/blogging-platform/blogging/frontend/src/api/postApi.js"],"sourcesContent":["// frontend/src/api/postApi.js\r\nexport const createPost = async (newPost) => {\r\n    const token = localStorage.getItem('token');\r\n    const response = await fetch('http://localhost:5000/api/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${token}`, // Include the token\r\n        },\r\n        body: JSON.stringify(newPost),\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n    }\r\n};\r\n\r\n// Add a function for user login\r\nexport const loginUser = async (username, password) => {\r\n    const response = await fetch('http://localhost:5000/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n        throw new Error('Failed to login');\r\n    }\r\n\r\n    const data = await response.json();\r\n    localStorage.setItem('token', data.token);\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAG,MAAOC,OAAO,IAAK;EACzC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;IAC5DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUP,KAAK,EAAE,CAAE;IACtC,CAAC;IACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,OAAO;EAChC,CAAC,CAAC;EAEF,IAAI,CAACI,QAAQ,CAACQ,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACnD,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;IACjEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEI,QAAQ;MAAEC;IAAS,CAAC;EAC/C,CAAC,CAAC;EAEF,IAAI,CAACZ,QAAQ,CAACQ,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACtC;EAEA,MAAMI,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;EAClChB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAEF,IAAI,CAAChB,KAAK,CAAC;AAC7C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}