{"ast":null,"code":"// postApi.js\n\n// Function to fetch posts\nexport const fetchPosts = async () => {\n  const response = await fetch('http://localhost:5000/api/posts');\n\n  // Check if the response is okay (status in the range 200-299)\n  if (!response.ok) {\n    throw new Error('Failed to fetch posts');\n  }\n\n  // Parse the response data as JSON\n  return await response.json();\n};\n\n// Function to create a new post\nexport const createPost = async newPost => {\n  const response = await fetch('http://localhost:5000/api/posts', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPost)\n  });\n\n  // Check if the response is okay\n  if (!response.ok) {\n    throw new Error('Failed to create post');\n  }\n\n  // Return the created post data as JSON\n  return await response.json();\n};","map":{"version":3,"names":["fetchPosts","response","fetch","ok","Error","json","createPost","newPost","method","headers","body","JSON","stringify"],"sources":["C:/Users/LENOVO/Desktop/blogging-platform/blogging/frontend/src/api/postApi.js"],"sourcesContent":["// postApi.js\r\n\r\n// Function to fetch posts\r\nexport const fetchPosts = async () => {\r\n    const response = await fetch('http://localhost:5000/api/posts');\r\n\r\n    // Check if the response is okay (status in the range 200-299)\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch posts');\r\n    }\r\n\r\n    // Parse the response data as JSON\r\n    return await response.json();\r\n};\r\n\r\n// Function to create a new post\r\nexport const createPost = async (newPost) => {\r\n    const response = await fetch('http://localhost:5000/api/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newPost),\r\n    });\r\n\r\n    // Check if the response is okay\r\n    if (!response.ok) {\r\n        throw new Error('Failed to create post');\r\n    }\r\n\r\n    // Return the created post data as JSON\r\n    return await response.json();\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;;EAE/D;EACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;;EAEA;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,OAAO,IAAK;EACzC,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;IAC5DM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;EAChC,CAAC,CAAC;;EAEF;EACA,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC5C;;EAEA;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}