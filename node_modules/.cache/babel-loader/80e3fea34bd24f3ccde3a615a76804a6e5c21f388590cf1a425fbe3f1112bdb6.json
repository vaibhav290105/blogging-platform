{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\blogging-platform\\\\blogging\\\\frontend\\\\src\\\\components\\\\PostList.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ onEdit, onDelete }) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/posts');\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                setPosts(data);\r\n            } catch (error) {\r\n                console.error('Error fetching posts:', error);\r\n            }\r\n        };\r\n\r\n        fetchPosts();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Posts</h2>\r\n            {posts.map(post => (\r\n                <Post \r\n                    key={post.id} // Ensure this is unique\r\n                    post={post} \r\n                    onEdit={() => onEdit(post.id)} // Pass ID for editing\r\n                    onDelete={() => onDelete(post.id)} // Pass ID for deleting\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;*/\nimport React, { useEffect, useState } from 'react';\nimport Post from './Post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostList = ({\n  onEdit,\n  onDelete\n}) => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/posts');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setPosts(data);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      // Ensure this is unique\n      post: post,\n      onEdit: () => onEdit(post) // Pass the entire post object for editing\n      ,\n      onDelete: () => onDelete(post.id) // Pass ID for deleting\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","Post","jsxDEV","_jsxDEV","PostList","onEdit","onDelete","_s","posts","setPosts","fetchPosts","response","fetch","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/blogging-platform/blogging/frontend/src/components/PostList.js"],"sourcesContent":["/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ onEdit, onDelete }) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/posts');\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                setPosts(data);\r\n            } catch (error) {\r\n                console.error('Error fetching posts:', error);\r\n            }\r\n        };\r\n\r\n        fetchPosts();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Posts</h2>\r\n            {posts.map(post => (\r\n                <Post \r\n                    key={post.id} // Ensure this is unique\r\n                    post={post} \r\n                    onEdit={() => onEdit(post.id)} // Pass ID for editing\r\n                    onDelete={() => onDelete(post.id)} // Pass ID for deleting\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;*/\r\nimport React, { useEffect, useState } from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ onEdit, onDelete }) => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:5000/api/posts');\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const data = await response.json();\r\n                setPosts(data);\r\n            } catch (error) {\r\n                console.error('Error fetching posts:', error);\r\n            }\r\n        };\r\n\r\n        fetchPosts();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Posts</h2>\r\n            {posts.map(post => (\r\n                <Post \r\n                    key={post.id} // Ensure this is unique\r\n                    post={post} \r\n                    onEdit={() => onEdit(post)} // Pass the entire post object for editing\r\n                    onDelete={() => onDelete(post.id)} // Pass ID for deleting\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZ,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;QAC/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,QAAQ,CAACM,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IAEDP,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACbf,KAAK,CAACgB,GAAG,CAACC,IAAI,iBACXtB,OAAA,CAACF,IAAI;MACa;MACdwB,IAAI,EAAEA,IAAK;MACXpB,MAAM,EAAEA,CAAA,KAAMA,MAAM,CAACoB,IAAI,CAAE,CAAC;MAAA;MAC5BnB,QAAQ,EAAEA,CAAA,KAAMA,QAAQ,CAACmB,IAAI,CAACC,EAAE,CAAE,CAAC;IAAA,GAH9BD,IAAI,CAACC,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIf,CACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAChB,EAAA,CAjCIH,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AAmCd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}